# Stage 1: Build the Go application and Delve
FROM golang:alpine AS build

# Install git to fetch dependencies and bash for convenience
RUN apk add --no-cache git bash

# Set the working directory inside the container
WORKDIR /app

# Copy the Go application source code to the container
COPY . .

# Build the Go application with debugging information (-gcflags="-N -l")
RUN go build -gcflags="all=-N -l" -o main ./cmd/api

# Install Delve in the build stage
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Stage 2: Final image with Delve and the Go application
FROM alpine

# Install bash and any other necessary runtime dependencies
RUN apk add --no-cache bash

# Copy the Go binary and Delve from the build stage
COPY --from=build /app/main /app/main
COPY --from=build /go/bin/dlv /usr/local/bin/dlv

# Expose the ports for the application (9091) and Delve debugger (40000)
EXPOSE 9091 40000

# Start the application with Delve for remote debugging
ENTRYPOINT ["dlv", "exec", "/app/main", "--headless", "--listen=:40000", "--api-version=2", "--accept-multiclient", "--continue"]

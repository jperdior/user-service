// Code generated by mockery v2.45.1. DO NOT EDIT.

package querymocks

import (
	kit "user-service/kit"
	query "user-service/kit/query"

	mock "github.com/stretchr/testify/mock"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

// Ask provides a mock function with given fields: _a0
func (_m *Bus) Ask(_a0 query.Query) (interface{}, *kit.DomainError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ask")
	}

	var r0 interface{}
	var r1 *kit.DomainError
	if rf, ok := ret.Get(0).(func(query.Query) (interface{}, *kit.DomainError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(query.Query) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(query.Query) *kit.DomainError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*kit.DomainError)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *Bus) Register(_a0 query.Type, _a1 query.Handler) {
	_m.Called(_a0, _a1)
}

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
